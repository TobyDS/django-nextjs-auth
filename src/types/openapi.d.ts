/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/appointments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for Appointments.
         *
         *     Permissions Required:
         *     - Support (Full Access)
         *     - Optician (Full Access)
         *
         *     Query Parameters:
         *     - `patient` - Filter by patient id
         *     - `optician` - Filter by optician id
         *     - `status` - Filter by status, options are: BOOKED, CANCELLED, MISSED, ATTENDED
         *     - `date_from` - Filter by date greater than or equal to, provide date in format (YYYY-MM-DD), you can also provide in ISO format for specific time.
         *     - `date_to` - Filter by date less than or equal to, provide date in format (YYYY-MM-DD), you can also provide in ISO format for specific time. */
        get: operations["appointments_list"];
        put?: never;
        /** @description ViewSet for Appointments.
         *
         *     Permissions Required:
         *     - Support (Full Access)
         *     - Optician (Full Access)
         *
         *     Query Parameters:
         *     - `patient` - Filter by patient id
         *     - `optician` - Filter by optician id
         *     - `status` - Filter by status, options are: BOOKED, CANCELLED, MISSED, ATTENDED
         *     - `date_from` - Filter by date greater than or equal to, provide date in format (YYYY-MM-DD), you can also provide in ISO format for specific time.
         *     - `date_to` - Filter by date less than or equal to, provide date in format (YYYY-MM-DD), you can also provide in ISO format for specific time. */
        post: operations["appointments_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/appointments/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for Appointments.
         *
         *     Permissions Required:
         *     - Support (Full Access)
         *     - Optician (Full Access)
         *
         *     Query Parameters:
         *     - `patient` - Filter by patient id
         *     - `optician` - Filter by optician id
         *     - `status` - Filter by status, options are: BOOKED, CANCELLED, MISSED, ATTENDED
         *     - `date_from` - Filter by date greater than or equal to, provide date in format (YYYY-MM-DD), you can also provide in ISO format for specific time.
         *     - `date_to` - Filter by date less than or equal to, provide date in format (YYYY-MM-DD), you can also provide in ISO format for specific time. */
        get: operations["appointments_retrieve"];
        /** @description ViewSet for Appointments.
         *
         *     Permissions Required:
         *     - Support (Full Access)
         *     - Optician (Full Access)
         *
         *     Query Parameters:
         *     - `patient` - Filter by patient id
         *     - `optician` - Filter by optician id
         *     - `status` - Filter by status, options are: BOOKED, CANCELLED, MISSED, ATTENDED
         *     - `date_from` - Filter by date greater than or equal to, provide date in format (YYYY-MM-DD), you can also provide in ISO format for specific time.
         *     - `date_to` - Filter by date less than or equal to, provide date in format (YYYY-MM-DD), you can also provide in ISO format for specific time. */
        put: operations["appointments_update"];
        post?: never;
        /** @description ViewSet for Appointments.
         *
         *     Permissions Required:
         *     - Support (Full Access)
         *     - Optician (Full Access)
         *
         *     Query Parameters:
         *     - `patient` - Filter by patient id
         *     - `optician` - Filter by optician id
         *     - `status` - Filter by status, options are: BOOKED, CANCELLED, MISSED, ATTENDED
         *     - `date_from` - Filter by date greater than or equal to, provide date in format (YYYY-MM-DD), you can also provide in ISO format for specific time.
         *     - `date_to` - Filter by date less than or equal to, provide date in format (YYYY-MM-DD), you can also provide in ISO format for specific time. */
        delete: operations["appointments_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet for Appointments.
         *
         *     Permissions Required:
         *     - Support (Full Access)
         *     - Optician (Full Access)
         *
         *     Query Parameters:
         *     - `patient` - Filter by patient id
         *     - `optician` - Filter by optician id
         *     - `status` - Filter by status, options are: BOOKED, CANCELLED, MISSED, ATTENDED
         *     - `date_from` - Filter by date greater than or equal to, provide date in format (YYYY-MM-DD), you can also provide in ISO format for specific time.
         *     - `date_to` - Filter by date less than or equal to, provide date in format (YYYY-MM-DD), you can also provide in ISO format for specific time. */
        patch: operations["appointments_partial_update"];
        trace?: never;
    };
    "/appointments/types/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for Appointment Types.
         *
         *     Permissions Required:
         *     - Support (Full Access)
         *     - Optician (Full Access)
         *
         *     Search Options:
         *     - Use the `search` query parameter to match a string across the following fields:
         *     - `name`
         *
         *     Results ordering:
         *     - By default will order by `duration` with the shortest duration first.
         *
         *     Duration is in the format of `HH:MM:SS` (Hours, Minutes, Seconds) */
        get: operations["appointments_types_list"];
        put?: never;
        /** @description ViewSet for Appointment Types.
         *
         *     Permissions Required:
         *     - Support (Full Access)
         *     - Optician (Full Access)
         *
         *     Search Options:
         *     - Use the `search` query parameter to match a string across the following fields:
         *     - `name`
         *
         *     Results ordering:
         *     - By default will order by `duration` with the shortest duration first.
         *
         *     Duration is in the format of `HH:MM:SS` (Hours, Minutes, Seconds) */
        post: operations["appointments_types_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/appointments/types/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for Appointment Types.
         *
         *     Permissions Required:
         *     - Support (Full Access)
         *     - Optician (Full Access)
         *
         *     Search Options:
         *     - Use the `search` query parameter to match a string across the following fields:
         *     - `name`
         *
         *     Results ordering:
         *     - By default will order by `duration` with the shortest duration first.
         *
         *     Duration is in the format of `HH:MM:SS` (Hours, Minutes, Seconds) */
        get: operations["appointments_types_retrieve"];
        /** @description ViewSet for Appointment Types.
         *
         *     Permissions Required:
         *     - Support (Full Access)
         *     - Optician (Full Access)
         *
         *     Search Options:
         *     - Use the `search` query parameter to match a string across the following fields:
         *     - `name`
         *
         *     Results ordering:
         *     - By default will order by `duration` with the shortest duration first.
         *
         *     Duration is in the format of `HH:MM:SS` (Hours, Minutes, Seconds) */
        put: operations["appointments_types_update"];
        post?: never;
        /** @description ViewSet for Appointment Types.
         *
         *     Permissions Required:
         *     - Support (Full Access)
         *     - Optician (Full Access)
         *
         *     Search Options:
         *     - Use the `search` query parameter to match a string across the following fields:
         *     - `name`
         *
         *     Results ordering:
         *     - By default will order by `duration` with the shortest duration first.
         *
         *     Duration is in the format of `HH:MM:SS` (Hours, Minutes, Seconds) */
        delete: operations["appointments_types_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet for Appointment Types.
         *
         *     Permissions Required:
         *     - Support (Full Access)
         *     - Optician (Full Access)
         *
         *     Search Options:
         *     - Use the `search` query parameter to match a string across the following fields:
         *     - `name`
         *
         *     Results ordering:
         *     - By default will order by `duration` with the shortest duration first.
         *
         *     Duration is in the format of `HH:MM:SS` (Hours, Minutes, Seconds) */
        patch: operations["appointments_types_partial_update"];
        trace?: never;
    };
    "/auth/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Check the credentials and return the REST Token
         *     if the credentials are valid and authenticated.
         *     Calls Django Auth login method to register User ID
         *     in Django session framework
         *
         *     Accept the following POST parameters: username, password
         *     Return the REST Framework Token Object's key. */
        post: operations["auth_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Calls Django logout method and delete the Token object
         *     assigned to the current User object.
         *
         *     Accepts/Returns nothing. */
        post: operations["auth_logout_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/password/change/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Calls Django Auth SetPasswordForm save method.
         *
         *     Accepts the following POST parameters: new_password1, new_password2
         *     Returns the success/fail message. */
        post: operations["auth_password_change_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/password/reset/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Calls Django Auth PasswordResetForm save method.
         *
         *     Accepts the following POST parameters: email
         *     Returns the success/fail message. */
        post: operations["auth_password_reset_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/password/reset/confirm/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Password reset e-mail link is confirmed, therefore
         *     this resets the user's password.
         *
         *     Accepts the following POST parameters: token, uid,
         *         new_password1, new_password2
         *     Returns the success/fail message. */
        post: operations["auth_password_reset_confirm_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/registration/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_registration_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/registration/resend-email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_registration_resend_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/registration/verify-email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["auth_registration_verify_email_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/token/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a refresh type JSON web token and returns an access type JSON web
         *     token if the refresh token is valid. */
        post: operations["auth_token_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/token/verify/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a token and indicates if it is valid.  This view provides no
         *     information about a token's fitness for a particular use. */
        post: operations["auth_token_verify_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Reads and updates UserModel fields
         *     Accepts GET, PUT, PATCH methods.
         *
         *     Default accepted fields: username, first_name, last_name
         *     Default display fields: pk, username, email, first_name, last_name
         *     Read-only fields: pk, email
         *
         *     Returns UserModel fields. */
        get: operations["auth_user_retrieve"];
        /** @description Reads and updates UserModel fields
         *     Accepts GET, PUT, PATCH methods.
         *
         *     Default accepted fields: username, first_name, last_name
         *     Default display fields: pk, username, email, first_name, last_name
         *     Read-only fields: pk, email
         *
         *     Returns UserModel fields. */
        put: operations["auth_user_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Reads and updates UserModel fields
         *     Accepts GET, PUT, PATCH methods.
         *
         *     Default accepted fields: username, first_name, last_name
         *     Default display fields: pk, username, email, first_name, last_name
         *     Read-only fields: pk, email
         *
         *     Returns UserModel fields. */
        patch: operations["auth_user_partial_update"];
        trace?: never;
    };
    "/communication/incoming-message/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description DO NOT USE UNLESS U ARE TWILIO
         *
         *     post:
         *     Handle incoming messages.
         *
         *     This endpoint is setup in orderd to handle incoming messages from the twilio webhook.
         *
         *     Parameters:
         *     - `Body`: The body of the incoming message. This should be a string.
         *     - `From`: The phone number of the sender. This should be a string. */
        post: operations["communication_incoming_message_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/communication/send-message/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description post:
         *     Send a message to a specific phone number.
         *
         *     This endpoint allows you to send a message to a specific phone number.
         *     You can specify the service (either 'sms' or 'whatsapp') you want to use to send the message.
         *
         *     Parameters:
         *     - `to`: The recipient's phone number. This should be a string.
         *     - `body`: The body of the message. This should be a string.
         *     - `service`: The service to use for sending the message. This should be either 'sms' or 'whatsapp'. */
        post: operations["communication_send_message_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/communication/send-message-to-patient/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description post:
         *     Send a message to a patient.
         *
         *     This endpoint allows you to send a message to a patient.
         *     You can specify the service (either 'sms' or 'whatsapp') you want to use to send the message.
         *
         *     Parameters:
         *     - `patient_id`: The ID of the patient. This should be an integer.
         *     - `body`: The body of the message. This should be a string.
         *     - `service`: The service to use for sending the message. This should be either 'sms' or 'whatsapp'. */
        post: operations["communication_send_message_to_patient_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/employees/opticians/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["employees_opticians_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/employees/supports/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["employees_supports_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/optician-notes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for Optician Notes.
         *
         *     Permissions Required:
         *     - Support (Read-Only)
         *     - Optician (Full Access)
         *     - Admin (Full Access)
         *
         *     Search Options:
         *     - Use the `search` query parameter to match a string across the following fields:
         *     - `subject`
         *     - `patient__full_name`
         *
         *     Query Parameters:
         *     - `patient` - Filter by patient full name
         *     - `author` - Filter by author username
         *
         *     Ordering Options:
         *     - Use the `ordering` query parameter to order by the following fields:
         *     - `created_at`
         *     - `patient__last_name` */
        get: operations["notes_optician_notes_list"];
        put?: never;
        /** @description ViewSet for Optician Notes.
         *
         *     Permissions Required:
         *     - Support (Read-Only)
         *     - Optician (Full Access)
         *     - Admin (Full Access)
         *
         *     Search Options:
         *     - Use the `search` query parameter to match a string across the following fields:
         *     - `subject`
         *     - `patient__full_name`
         *
         *     Query Parameters:
         *     - `patient` - Filter by patient full name
         *     - `author` - Filter by author username
         *
         *     Ordering Options:
         *     - Use the `ordering` query parameter to order by the following fields:
         *     - `created_at`
         *     - `patient__last_name` */
        post: operations["notes_optician_notes_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/optician-notes/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for Optician Notes.
         *
         *     Permissions Required:
         *     - Support (Read-Only)
         *     - Optician (Full Access)
         *     - Admin (Full Access)
         *
         *     Search Options:
         *     - Use the `search` query parameter to match a string across the following fields:
         *     - `subject`
         *     - `patient__full_name`
         *
         *     Query Parameters:
         *     - `patient` - Filter by patient full name
         *     - `author` - Filter by author username
         *
         *     Ordering Options:
         *     - Use the `ordering` query parameter to order by the following fields:
         *     - `created_at`
         *     - `patient__last_name` */
        get: operations["notes_optician_notes_retrieve"];
        /** @description ViewSet for Optician Notes.
         *
         *     Permissions Required:
         *     - Support (Read-Only)
         *     - Optician (Full Access)
         *     - Admin (Full Access)
         *
         *     Search Options:
         *     - Use the `search` query parameter to match a string across the following fields:
         *     - `subject`
         *     - `patient__full_name`
         *
         *     Query Parameters:
         *     - `patient` - Filter by patient full name
         *     - `author` - Filter by author username
         *
         *     Ordering Options:
         *     - Use the `ordering` query parameter to order by the following fields:
         *     - `created_at`
         *     - `patient__last_name` */
        put: operations["notes_optician_notes_update"];
        post?: never;
        /** @description ViewSet for Optician Notes.
         *
         *     Permissions Required:
         *     - Support (Read-Only)
         *     - Optician (Full Access)
         *     - Admin (Full Access)
         *
         *     Search Options:
         *     - Use the `search` query parameter to match a string across the following fields:
         *     - `subject`
         *     - `patient__full_name`
         *
         *     Query Parameters:
         *     - `patient` - Filter by patient full name
         *     - `author` - Filter by author username
         *
         *     Ordering Options:
         *     - Use the `ordering` query parameter to order by the following fields:
         *     - `created_at`
         *     - `patient__last_name` */
        delete: operations["notes_optician_notes_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet for Optician Notes.
         *
         *     Permissions Required:
         *     - Support (Read-Only)
         *     - Optician (Full Access)
         *     - Admin (Full Access)
         *
         *     Search Options:
         *     - Use the `search` query parameter to match a string across the following fields:
         *     - `subject`
         *     - `patient__full_name`
         *
         *     Query Parameters:
         *     - `patient` - Filter by patient full name
         *     - `author` - Filter by author username
         *
         *     Ordering Options:
         *     - Use the `ordering` query parameter to order by the following fields:
         *     - `created_at`
         *     - `patient__last_name` */
        patch: operations["notes_optician_notes_partial_update"];
        trace?: never;
    };
    "/notes/support-notes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for Support Notes.
         *
         *     Permissions Required:
         *     - Support (Full Access)
         *     - Optician (Read-Only)
         *     - Admin (Full Access)
         *
         *     Search Options:
         *     - Use the `search` query parameter to match a string across the following fields:
         *     - `subject`
         *     - `patient__full_name`
         *
         *     Query Parameters:
         *     - `patient` - Filter by patient full name
         *     - `author` - Filter by author username
         *
         *     Ordering Options:
         *     - Use the `ordering` query parameter to order by the following fields:
         *     - `created_at`
         *     - `patient__last_name` */
        get: operations["notes_support_notes_list"];
        put?: never;
        /** @description ViewSet for Support Notes.
         *
         *     Permissions Required:
         *     - Support (Full Access)
         *     - Optician (Read-Only)
         *     - Admin (Full Access)
         *
         *     Search Options:
         *     - Use the `search` query parameter to match a string across the following fields:
         *     - `subject`
         *     - `patient__full_name`
         *
         *     Query Parameters:
         *     - `patient` - Filter by patient full name
         *     - `author` - Filter by author username
         *
         *     Ordering Options:
         *     - Use the `ordering` query parameter to order by the following fields:
         *     - `created_at`
         *     - `patient__last_name` */
        post: operations["notes_support_notes_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/support-notes/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for Support Notes.
         *
         *     Permissions Required:
         *     - Support (Full Access)
         *     - Optician (Read-Only)
         *     - Admin (Full Access)
         *
         *     Search Options:
         *     - Use the `search` query parameter to match a string across the following fields:
         *     - `subject`
         *     - `patient__full_name`
         *
         *     Query Parameters:
         *     - `patient` - Filter by patient full name
         *     - `author` - Filter by author username
         *
         *     Ordering Options:
         *     - Use the `ordering` query parameter to order by the following fields:
         *     - `created_at`
         *     - `patient__last_name` */
        get: operations["notes_support_notes_retrieve"];
        /** @description ViewSet for Support Notes.
         *
         *     Permissions Required:
         *     - Support (Full Access)
         *     - Optician (Read-Only)
         *     - Admin (Full Access)
         *
         *     Search Options:
         *     - Use the `search` query parameter to match a string across the following fields:
         *     - `subject`
         *     - `patient__full_name`
         *
         *     Query Parameters:
         *     - `patient` - Filter by patient full name
         *     - `author` - Filter by author username
         *
         *     Ordering Options:
         *     - Use the `ordering` query parameter to order by the following fields:
         *     - `created_at`
         *     - `patient__last_name` */
        put: operations["notes_support_notes_update"];
        post?: never;
        /** @description ViewSet for Support Notes.
         *
         *     Permissions Required:
         *     - Support (Full Access)
         *     - Optician (Read-Only)
         *     - Admin (Full Access)
         *
         *     Search Options:
         *     - Use the `search` query parameter to match a string across the following fields:
         *     - `subject`
         *     - `patient__full_name`
         *
         *     Query Parameters:
         *     - `patient` - Filter by patient full name
         *     - `author` - Filter by author username
         *
         *     Ordering Options:
         *     - Use the `ordering` query parameter to order by the following fields:
         *     - `created_at`
         *     - `patient__last_name` */
        delete: operations["notes_support_notes_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet for Support Notes.
         *
         *     Permissions Required:
         *     - Support (Full Access)
         *     - Optician (Read-Only)
         *     - Admin (Full Access)
         *
         *     Search Options:
         *     - Use the `search` query parameter to match a string across the following fields:
         *     - `subject`
         *     - `patient__full_name`
         *
         *     Query Parameters:
         *     - `patient` - Filter by patient full name
         *     - `author` - Filter by author username
         *
         *     Ordering Options:
         *     - Use the `ordering` query parameter to order by the following fields:
         *     - `created_at`
         *     - `patient__last_name` */
        patch: operations["notes_support_notes_partial_update"];
        trace?: never;
    };
    "/patients/patient-prescriptions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Read only view:
         *     Returns: list of PatientPrescriptions.
         *     Permissions Required:
         *     - Optician (Full Access)
         *     - Support (Full Access)
         *     - Admin (Full Access)
         *
         *     Search Options:
         *     - Use the `search` query parameter to match a string across the following fields:
         *     - `patient__username`
         *     - `patient__first_name`
         *     - `patient__last_name`
         *
         *     Ordering Options:
         *     - Use the `ordering` query parameter to order by the following fields:
         *     - `created_at`
         *     - `patient__last_name` */
        get: operations["patients_patient_prescriptions_list"];
        put?: never;
        /** @description View to create a new PatientPrescription.
         *     Permissions Required:
         *     - Optician (Full Access) */
        post: operations["patients_patient_prescriptions_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/patients/patient-prescriptions/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Read only view:
         *     Returns: a single PatientPrescription.
         *     Permissions Required:
         *     - Optician (Full Access)
         *     - Support (Full Access)
         *     - Admin (Full Access) */
        get: operations["patients_patient_prescriptions_retrieve"];
        /** @description Permissions Required:
         *     - Optician and Owner of Object (Full Access) */
        put: operations["patients_patient_prescriptions_update"];
        post?: never;
        /** @description Permissions Required:
         *     - Optician and Owner of Object (Full Access)
         *     - Admin (Full Access) */
        delete: operations["patients_patient_prescriptions_destroy"];
        options?: never;
        head?: never;
        /** @description Permissions Required:
         *     - Optician and Owner of Object (Full Access) */
        patch: operations["patients_patient_prescriptions_partial_update"];
        trace?: never;
    };
    "/patients/patient-profiles/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ### Permissions Required:
         *     - **Optician**: Full access
         *     - **Support**: Full access
         *     - **Admin**: Full access
         *
         *     ### Search Options:
         *     You can use the `search` query parameter to match a string across the following fields:
         *     - **first_name**
         *     - **last_name**
         *     - **username**
         *     - **dob** (Date of Birth)
         *
         *     #### Individual Field Filters:
         *     For more specific searches, you may filter by the following fields with individual query parameters:
         *     - **username**: e.g., `?username=JohnDoe`
         *     - **first_name**: e.g., `?first_name=John`
         *     - **last_name**: e.g., `?last_name=Smith`
         *     - **dob**: Date of Birth in ISO format (YYYY-MM-DD), e.g., `?dob=2021-01-01`
         *     - **state**: values `ARCHIVED`, "ACTIVE", "DRAFT", e.g., `?state=ARCHIVED`
         *
         *     ### Note: If no state is provided in query params, will return only ACTIVE profiles by default.
         *
         *     ### Ordering Options:
         *     Use the `ordering` query parameter to sort the results by:
         *     - **first_name**
         *     - **last_name**
         *     - **dob**
         *
         *     #### Examples:
         *     - Search across multiple fields: `?search=John`
         *     - Filter by username and sort by date of birth: `?username=JohnDoe&ordering=dob`
         *     - Filter for archived profiles: `?state=ARCHIVED`
         *     - Filter for active profiles: `?state=ACTIVE` */
        get: operations["patients_patient_profiles_list"];
        put?: never;
        /** @description ### Permissions Required:
         *     - **Optician**: Full access
         *     - **Support**: Full access
         *     - **Admin**: Full access
         *
         *     ### Search Options:
         *     You can use the `search` query parameter to match a string across the following fields:
         *     - **first_name**
         *     - **last_name**
         *     - **username**
         *     - **dob** (Date of Birth)
         *
         *     #### Individual Field Filters:
         *     For more specific searches, you may filter by the following fields with individual query parameters:
         *     - **username**: e.g., `?username=JohnDoe`
         *     - **first_name**: e.g., `?first_name=John`
         *     - **last_name**: e.g., `?last_name=Smith`
         *     - **dob**: Date of Birth in ISO format (YYYY-MM-DD), e.g., `?dob=2021-01-01`
         *     - **state**: values `ARCHIVED`, "ACTIVE", "DRAFT", e.g., `?state=ARCHIVED`
         *
         *     ### Note: If no state is provided in query params, will return only ACTIVE profiles by default.
         *
         *     ### Ordering Options:
         *     Use the `ordering` query parameter to sort the results by:
         *     - **first_name**
         *     - **last_name**
         *     - **dob**
         *
         *     #### Examples:
         *     - Search across multiple fields: `?search=John`
         *     - Filter by username and sort by date of birth: `?username=JohnDoe&ordering=dob`
         *     - Filter for archived profiles: `?state=ARCHIVED`
         *     - Filter for active profiles: `?state=ACTIVE` */
        post: operations["patients_patient_profiles_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/patients/patient-profiles/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ### Permissions Required:
         *     - **Optician**: Full access
         *     - **Support**: Full access
         *     - **Admin**: Full access
         *
         *     ### Search Options:
         *     You can use the `search` query parameter to match a string across the following fields:
         *     - **first_name**
         *     - **last_name**
         *     - **username**
         *     - **dob** (Date of Birth)
         *
         *     #### Individual Field Filters:
         *     For more specific searches, you may filter by the following fields with individual query parameters:
         *     - **username**: e.g., `?username=JohnDoe`
         *     - **first_name**: e.g., `?first_name=John`
         *     - **last_name**: e.g., `?last_name=Smith`
         *     - **dob**: Date of Birth in ISO format (YYYY-MM-DD), e.g., `?dob=2021-01-01`
         *     - **state**: values `ARCHIVED`, "ACTIVE", "DRAFT", e.g., `?state=ARCHIVED`
         *
         *     ### Note: If no state is provided in query params, will return only ACTIVE profiles by default.
         *
         *     ### Ordering Options:
         *     Use the `ordering` query parameter to sort the results by:
         *     - **first_name**
         *     - **last_name**
         *     - **dob**
         *
         *     #### Examples:
         *     - Search across multiple fields: `?search=John`
         *     - Filter by username and sort by date of birth: `?username=JohnDoe&ordering=dob`
         *     - Filter for archived profiles: `?state=ARCHIVED`
         *     - Filter for active profiles: `?state=ACTIVE` */
        get: operations["patients_patient_profiles_retrieve"];
        /** @description ### Permissions Required:
         *     - **Optician**: Full access
         *     - **Support**: Full access
         *     - **Admin**: Full access
         *
         *     ### Search Options:
         *     You can use the `search` query parameter to match a string across the following fields:
         *     - **first_name**
         *     - **last_name**
         *     - **username**
         *     - **dob** (Date of Birth)
         *
         *     #### Individual Field Filters:
         *     For more specific searches, you may filter by the following fields with individual query parameters:
         *     - **username**: e.g., `?username=JohnDoe`
         *     - **first_name**: e.g., `?first_name=John`
         *     - **last_name**: e.g., `?last_name=Smith`
         *     - **dob**: Date of Birth in ISO format (YYYY-MM-DD), e.g., `?dob=2021-01-01`
         *     - **state**: values `ARCHIVED`, "ACTIVE", "DRAFT", e.g., `?state=ARCHIVED`
         *
         *     ### Note: If no state is provided in query params, will return only ACTIVE profiles by default.
         *
         *     ### Ordering Options:
         *     Use the `ordering` query parameter to sort the results by:
         *     - **first_name**
         *     - **last_name**
         *     - **dob**
         *
         *     #### Examples:
         *     - Search across multiple fields: `?search=John`
         *     - Filter by username and sort by date of birth: `?username=JohnDoe&ordering=dob`
         *     - Filter for archived profiles: `?state=ARCHIVED`
         *     - Filter for active profiles: `?state=ACTIVE` */
        put: operations["patients_patient_profiles_update"];
        post?: never;
        /** @description ### Permissions Required:
         *     - **Optician**: Full access
         *     - **Support**: Full access
         *     - **Admin**: Full access
         *
         *     ### Search Options:
         *     You can use the `search` query parameter to match a string across the following fields:
         *     - **first_name**
         *     - **last_name**
         *     - **username**
         *     - **dob** (Date of Birth)
         *
         *     #### Individual Field Filters:
         *     For more specific searches, you may filter by the following fields with individual query parameters:
         *     - **username**: e.g., `?username=JohnDoe`
         *     - **first_name**: e.g., `?first_name=John`
         *     - **last_name**: e.g., `?last_name=Smith`
         *     - **dob**: Date of Birth in ISO format (YYYY-MM-DD), e.g., `?dob=2021-01-01`
         *     - **state**: values `ARCHIVED`, "ACTIVE", "DRAFT", e.g., `?state=ARCHIVED`
         *
         *     ### Note: If no state is provided in query params, will return only ACTIVE profiles by default.
         *
         *     ### Ordering Options:
         *     Use the `ordering` query parameter to sort the results by:
         *     - **first_name**
         *     - **last_name**
         *     - **dob**
         *
         *     #### Examples:
         *     - Search across multiple fields: `?search=John`
         *     - Filter by username and sort by date of birth: `?username=JohnDoe&ordering=dob`
         *     - Filter for archived profiles: `?state=ARCHIVED`
         *     - Filter for active profiles: `?state=ACTIVE` */
        delete: operations["patients_patient_profiles_destroy"];
        options?: never;
        head?: never;
        /** @description ### Permissions Required:
         *     - **Optician**: Full access
         *     - **Support**: Full access
         *     - **Admin**: Full access
         *
         *     ### Search Options:
         *     You can use the `search` query parameter to match a string across the following fields:
         *     - **first_name**
         *     - **last_name**
         *     - **username**
         *     - **dob** (Date of Birth)
         *
         *     #### Individual Field Filters:
         *     For more specific searches, you may filter by the following fields with individual query parameters:
         *     - **username**: e.g., `?username=JohnDoe`
         *     - **first_name**: e.g., `?first_name=John`
         *     - **last_name**: e.g., `?last_name=Smith`
         *     - **dob**: Date of Birth in ISO format (YYYY-MM-DD), e.g., `?dob=2021-01-01`
         *     - **state**: values `ARCHIVED`, "ACTIVE", "DRAFT", e.g., `?state=ARCHIVED`
         *
         *     ### Note: If no state is provided in query params, will return only ACTIVE profiles by default.
         *
         *     ### Ordering Options:
         *     Use the `ordering` query parameter to sort the results by:
         *     - **first_name**
         *     - **last_name**
         *     - **dob**
         *
         *     #### Examples:
         *     - Search across multiple fields: `?search=John`
         *     - Filter by username and sort by date of birth: `?username=JohnDoe&ordering=dob`
         *     - Filter for archived profiles: `?state=ARCHIVED`
         *     - Filter for active profiles: `?state=ACTIVE` */
        patch: operations["patients_patient_profiles_partial_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AppointmentCategory: {
            readonly id: number;
            name: string;
            description?: string;
        };
        /** @description Serializer for reading appointments */
        AppointmentRead: {
            readonly id: number;
            appointment_category: components["schemas"]["AppointmentCategory"];
            optician: components["schemas"]["CustomUserDetails"];
            created_by: components["schemas"]["CustomUserDetails"];
            /** Format: date-time */
            date: string;
            status: components["schemas"]["StatusEnum"];
            /** Format: date-time */
            readonly created_at: string;
            notes?: string;
            duration: components["schemas"]["DurationEnum"];
            patient: number;
        };
        /** @description Serializer for creating/updating appointments */
        AppointmentWrite: {
            readonly id: number;
            /** Format: date-time */
            date: string;
            status: components["schemas"]["StatusEnum"];
            /** Format: date-time */
            readonly created_at: string;
            notes?: string;
            duration: components["schemas"]["DurationEnum"];
            patient: number;
            optician: number;
            readonly created_by: number;
            appointment_category: number;
        };
        /** @enum {unknown} */
        BlankEnum: "";
        /** @description User model w/o password */
        CustomUserDetails: {
            /** ID */
            readonly pk: number;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            /**
             * Email address
             * Format: email
             */
            readonly email: string;
            first_name?: string;
            last_name?: string;
            groups: string[];
            full_name?: string;
        };
        /**
         * @description * `0:10:00` - 10 minutes
         *     * `0:15:00` - 15 minutes
         *     * `0:20:00` - 20 minutes
         *     * `0:30:00` - 30 minutes
         *     * `0:40:00` - 40 minutes
         *     * `0:50:00` - 50 minutes
         *     * `1:00:00` - 60 minutes
         * @enum {unknown}
         */
        DurationEnum: "600.0" | "900.0" | "1200.0" | "1800.0" | "2400.0" | "3000.0" | "3600.0";
        /**
         * @description * `MALE` - Male (including trans man)
         *     * `FEMALE` - Female (including trans woman)
         *     * `NON_BINARY` - Non-Binary
         *     * `OTHER` - Other (not listed)
         *     * `NOT_STATED` - Prefer not to say
         * @enum {string}
         */
        GenderEnum: "MALE" | "FEMALE" | "NON_BINARY" | "OTHER" | "NOT_STATED";
        IncomingMessage: {
            /** @description The sender phone number */
            from_number: string;
            /** @description The body of the SMS message */
            body: string;
            service: components["schemas"]["ServiceEnum"];
        };
        /** @description Serializer for JWT authentication. */
        JWT: {
            access: string;
            refresh: string;
            user: components["schemas"]["CustomUserDetails"];
        };
        Login: {
            username?: string;
            /** Format: email */
            email?: string;
            password: string;
        };
        /**
         * @description * `FULL_TIME_EDUCATION` - Full Time Education
         *     * `SIXTY_AND_OVER` - 60 and Over
         *     * `UNDER_SIXTEEN` - Under 16
         *     * `PARTIALLY_SIGHTED_OR_BLIND` - Partially Sighted or Blind
         *     * `DIABETES_OR_GLAUCOMA` - Diabetes or Glaucoma
         *     * `OVER_FORTY_HAS_RELATIVE_WITH_GLAUCOMA` - Over 40 and Has Relative with Glaucoma
         *     * `OPHTHALMOLOGIST_ADVISED_GLAUCOMA` - Ophthalmologist Advised Glaucoma
         *     * `PRISONER_ON_LEAVE` - Prisoner on Leave
         *     * `NHS_COMPLEX_LENS_VOUCHER` - NHS Complex Lens Voucher
         *     * `INCOME_SUPPORT` - Income Support
         *     * `INCOME_BASED_EMPLOYMENT_AND_SUPPORT_ALLOWANCE` - Income-Based Employment and Support Allowance
         *     * `INCOME_BASED_JOB_SEEKERS_ALLOWANCE` - Income-Based Job Seekers Allowance
         *     * `PENSION_CREDIT` - Pension Credit
         *     * `UNIVERSAL_CREDIT` - Universal Credit
         * @enum {string}
         */
        NhsCoverageCategoryEnum: "FULL_TIME_EDUCATION" | "SIXTY_AND_OVER" | "UNDER_SIXTEEN" | "PARTIALLY_SIGHTED_OR_BLIND" | "DIABETES_OR_GLAUCOMA" | "OVER_FORTY_HAS_RELATIVE_WITH_GLAUCOMA" | "OPHTHALMOLOGIST_ADVISED_GLAUCOMA" | "PRISONER_ON_LEAVE" | "NHS_COMPLEX_LENS_VOUCHER" | "INCOME_SUPPORT" | "INCOME_BASED_EMPLOYMENT_AND_SUPPORT_ALLOWANCE" | "INCOME_BASED_JOB_SEEKERS_ALLOWANCE" | "PENSION_CREDIT" | "UNIVERSAL_CREDIT";
        PasswordChange: {
            new_password1: string;
            new_password2: string;
        };
        /** @description Serializer for requesting a password reset e-mail. */
        PasswordReset: {
            /** Format: email */
            email: string;
        };
        /** @description Serializer for confirming a password reset attempt. */
        PasswordResetConfirm: {
            new_password1: string;
            new_password2: string;
            uid: string;
            token: string;
        };
        PatchedAppointmentCategory: {
            readonly id?: number;
            name?: string;
            description?: string;
        };
        /** @description Serializer for creating/updating appointments */
        PatchedAppointmentWrite: {
            readonly id?: number;
            /** Format: date-time */
            date?: string;
            status?: components["schemas"]["StatusEnum"];
            /** Format: date-time */
            readonly created_at?: string;
            notes?: string;
            duration?: components["schemas"]["DurationEnum"];
            patient?: number;
            optician?: number;
            readonly created_by?: number;
            appointment_category?: number;
        };
        /** @description User model w/o password */
        PatchedCustomUserDetails: {
            /** ID */
            readonly pk?: number;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username?: string;
            /**
             * Email address
             * Format: email
             */
            readonly email?: string;
            first_name?: string;
            last_name?: string;
            groups?: string[];
            full_name?: string;
        };
        PatchedPatientNote: {
            readonly id?: number;
            subject?: string;
            body?: string;
            /** Format: date-time */
            readonly created_at?: string;
            patient?: number;
            author?: number;
        };
        PatchedPatientPrescription: {
            readonly id?: number;
            reading?: string;
            /** Format: date-time */
            readonly created_at?: string;
            patient?: number | null;
            author?: number;
        };
        PatchedPatientProfile: {
            readonly id?: number;
            nhs_number?: string;
            first_name?: string;
            last_name?: string;
            readonly full_name?: string;
            readonly username?: string;
            gender?: components["schemas"]["GenderEnum"];
            /** Format: email */
            email?: string | null;
            /** Format: date */
            dob?: string | null;
            phone_number?: string;
            address_line_1?: string;
            address_line_2?: string;
            patient_coverage?: components["schemas"]["PatientCoverageEnum"];
            nhs_coverage_category?: components["schemas"]["NhsCoverageCategoryEnum"] | components["schemas"]["BlankEnum"];
            gp_name?: string;
            state?: components["schemas"]["StateEnum"];
            recall_timer?: components["schemas"]["RecallTimerEnum"] | components["schemas"]["BlankEnum"];
        };
        /**
         * @description * `PRIVATE` - PRIVATE
         *     * `NHS` - NHS
         * @enum {string}
         */
        PatientCoverageEnum: "PRIVATE" | "NHS";
        PatientNote: {
            readonly id: number;
            subject: string;
            body: string;
            /** Format: date-time */
            readonly created_at: string;
            patient: number;
            author: number;
        };
        PatientPrescription: {
            readonly id: number;
            reading: string;
            /** Format: date-time */
            readonly created_at: string;
            patient?: number | null;
            author: number;
        };
        PatientProfile: {
            readonly id: number;
            nhs_number?: string;
            first_name: string;
            last_name: string;
            readonly full_name: string;
            readonly username: string;
            gender: components["schemas"]["GenderEnum"];
            /** Format: email */
            email?: string | null;
            /** Format: date */
            dob?: string | null;
            phone_number: string;
            address_line_1: string;
            address_line_2?: string;
            patient_coverage: components["schemas"]["PatientCoverageEnum"];
            nhs_coverage_category?: components["schemas"]["NhsCoverageCategoryEnum"] | components["schemas"]["BlankEnum"];
            gp_name?: string;
            state?: components["schemas"]["StateEnum"];
            recall_timer?: components["schemas"]["RecallTimerEnum"] | components["schemas"]["BlankEnum"];
        };
        /**
         * @description * `SIX_MONTHS` - 6 Months
         *     * `ONE_YEAR` - 1 Year
         *     * `TWO_YEARS` - 2 Years
         * @enum {string}
         */
        RecallTimerEnum: "SIX_MONTHS" | "ONE_YEAR" | "TWO_YEARS";
        Register: {
            username: string;
            /** Format: email */
            email?: string;
            password1: string;
            password2: string;
        };
        ResendEmailVerification: {
            /** Format: email */
            email?: string;
        };
        RestAuthDetail: {
            readonly detail: string;
        };
        SendMessage: {
            /** @description The recipient phone number */
            to: string;
            /** @description The body of the SMS message */
            body: string;
            service: components["schemas"]["ServiceEnum"];
        };
        SendMessageResponse: {
            /** @description The status of the operation */
            status: string;
            /** @description A string describing the error, if any */
            error?: string;
        };
        SendPatientNotification: {
            /** @description The patient id */
            patient_id: number;
            /** @description The body of the SMS message notification to send to the patient */
            body: string;
            service: components["schemas"]["ServiceEnum"];
        };
        SendPatientNotificationResponse: {
            /** @description The status of the operation */
            status: string;
            /** @description A string describing the error, if any */
            error?: string;
        };
        /**
         * @description * `whatsapp` - whatsapp
         *     * `sms` - sms
         * @enum {string}
         */
        ServiceEnum: "whatsapp" | "sms";
        /**
         * @description * `ACTIVE` - ACTIVE
         *     * `ARCHIVED` - ARCHIVED
         *     * `DRAFT` - DRAFT
         * @enum {string}
         */
        StateEnum: "ACTIVE" | "ARCHIVED" | "DRAFT";
        /**
         * @description * `BOOKED` - BOOKED
         *     * `CANCELLED` - CANCELLED
         *     * `MISSED` - MISSED
         *     * `ATTENDED` - ATTENDED
         * @enum {string}
         */
        StatusEnum: "BOOKED" | "CANCELLED" | "MISSED" | "ATTENDED";
        TokenRefresh: {
            readonly access: string;
            refresh: string;
        };
        TokenVerify: {
            token: string;
        };
        VerifyEmail: {
            key: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    appointments_list: {
        parameters: {
            query?: {
                date_from?: string;
                date_to?: string;
                optician?: number;
                patient?: number;
                /** @description * `BOOKED` - BOOKED
                 *     * `CANCELLED` - CANCELLED
                 *     * `MISSED` - MISSED
                 *     * `ATTENDED` - ATTENDED */
                status?: "ATTENDED" | "BOOKED" | "CANCELLED" | "MISSED";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppointmentRead"][];
                };
            };
        };
    };
    appointments_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AppointmentWrite"];
                "application/x-www-form-urlencoded": components["schemas"]["AppointmentWrite"];
                "multipart/form-data": components["schemas"]["AppointmentWrite"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppointmentWrite"];
                };
            };
        };
    };
    appointments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this appointment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppointmentRead"];
                };
            };
        };
    };
    appointments_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this appointment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AppointmentWrite"];
                "application/x-www-form-urlencoded": components["schemas"]["AppointmentWrite"];
                "multipart/form-data": components["schemas"]["AppointmentWrite"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppointmentWrite"];
                };
            };
        };
    };
    appointments_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this appointment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    appointments_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this appointment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAppointmentWrite"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedAppointmentWrite"];
                "multipart/form-data": components["schemas"]["PatchedAppointmentWrite"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppointmentWrite"];
                };
            };
        };
    };
    appointments_types_list: {
        parameters: {
            query?: {
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppointmentCategory"][];
                };
            };
        };
    };
    appointments_types_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AppointmentCategory"];
                "application/x-www-form-urlencoded": components["schemas"]["AppointmentCategory"];
                "multipart/form-data": components["schemas"]["AppointmentCategory"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppointmentCategory"];
                };
            };
        };
    };
    appointments_types_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this appointment category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppointmentCategory"];
                };
            };
        };
    };
    appointments_types_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this appointment category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AppointmentCategory"];
                "application/x-www-form-urlencoded": components["schemas"]["AppointmentCategory"];
                "multipart/form-data": components["schemas"]["AppointmentCategory"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppointmentCategory"];
                };
            };
        };
    };
    appointments_types_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this appointment category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    appointments_types_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this appointment category. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAppointmentCategory"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedAppointmentCategory"];
                "multipart/form-data": components["schemas"]["PatchedAppointmentCategory"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppointmentCategory"];
                };
            };
        };
    };
    auth_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Login"];
                "application/x-www-form-urlencoded": components["schemas"]["Login"];
                "multipart/form-data": components["schemas"]["Login"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JWT"];
                };
            };
        };
    };
    auth_logout_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    auth_password_change_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordChange"];
                "application/x-www-form-urlencoded": components["schemas"]["PasswordChange"];
                "multipart/form-data": components["schemas"]["PasswordChange"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    auth_password_reset_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordReset"];
                "application/x-www-form-urlencoded": components["schemas"]["PasswordReset"];
                "multipart/form-data": components["schemas"]["PasswordReset"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    auth_password_reset_confirm_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordResetConfirm"];
                "application/x-www-form-urlencoded": components["schemas"]["PasswordResetConfirm"];
                "multipart/form-data": components["schemas"]["PasswordResetConfirm"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    auth_registration_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Register"];
                "application/x-www-form-urlencoded": components["schemas"]["Register"];
                "multipart/form-data": components["schemas"]["Register"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JWT"];
                };
            };
        };
    };
    auth_registration_resend_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ResendEmailVerification"];
                "application/x-www-form-urlencoded": components["schemas"]["ResendEmailVerification"];
                "multipart/form-data": components["schemas"]["ResendEmailVerification"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    auth_registration_verify_email_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyEmail"];
                "application/x-www-form-urlencoded": components["schemas"]["VerifyEmail"];
                "multipart/form-data": components["schemas"]["VerifyEmail"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestAuthDetail"];
                };
            };
        };
    };
    auth_token_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefresh"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefresh"];
                "multipart/form-data": components["schemas"]["TokenRefresh"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefresh"];
                };
            };
        };
    };
    auth_token_verify_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenVerify"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenVerify"];
                "multipart/form-data": components["schemas"]["TokenVerify"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenVerify"];
                };
            };
        };
    };
    auth_user_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomUserDetails"];
                };
            };
        };
    };
    auth_user_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomUserDetails"];
                "application/x-www-form-urlencoded": components["schemas"]["CustomUserDetails"];
                "multipart/form-data": components["schemas"]["CustomUserDetails"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomUserDetails"];
                };
            };
        };
    };
    auth_user_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCustomUserDetails"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCustomUserDetails"];
                "multipart/form-data": components["schemas"]["PatchedCustomUserDetails"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomUserDetails"];
                };
            };
        };
    };
    communication_incoming_message_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IncomingMessage"];
                "application/x-www-form-urlencoded": components["schemas"]["IncomingMessage"];
                "multipart/form-data": components["schemas"]["IncomingMessage"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IncomingMessage"];
                };
            };
        };
    };
    communication_send_message_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendMessage"];
                "application/x-www-form-urlencoded": components["schemas"]["SendMessage"];
                "multipart/form-data": components["schemas"]["SendMessage"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendMessageResponse"];
                };
            };
        };
    };
    communication_send_message_to_patient_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendPatientNotification"];
                "application/x-www-form-urlencoded": components["schemas"]["SendPatientNotification"];
                "multipart/form-data": components["schemas"]["SendPatientNotification"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendPatientNotificationResponse"];
                };
            };
        };
    };
    employees_opticians_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomUserDetails"][];
                };
            };
        };
    };
    employees_supports_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomUserDetails"][];
                };
            };
        };
    };
    notes_optician_notes_list: {
        parameters: {
            query?: {
                author?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                patient?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientNote"][];
                };
            };
        };
    };
    notes_optician_notes_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatientNote"];
                "application/x-www-form-urlencoded": components["schemas"]["PatientNote"];
                "multipart/form-data": components["schemas"]["PatientNote"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientNote"];
                };
            };
        };
    };
    notes_optician_notes_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this optician note. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientNote"];
                };
            };
        };
    };
    notes_optician_notes_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this optician note. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatientNote"];
                "application/x-www-form-urlencoded": components["schemas"]["PatientNote"];
                "multipart/form-data": components["schemas"]["PatientNote"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientNote"];
                };
            };
        };
    };
    notes_optician_notes_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this optician note. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    notes_optician_notes_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this optician note. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPatientNote"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPatientNote"];
                "multipart/form-data": components["schemas"]["PatchedPatientNote"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientNote"];
                };
            };
        };
    };
    notes_support_notes_list: {
        parameters: {
            query?: {
                author?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                patient?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientNote"][];
                };
            };
        };
    };
    notes_support_notes_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatientNote"];
                "application/x-www-form-urlencoded": components["schemas"]["PatientNote"];
                "multipart/form-data": components["schemas"]["PatientNote"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientNote"];
                };
            };
        };
    };
    notes_support_notes_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this support note. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientNote"];
                };
            };
        };
    };
    notes_support_notes_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this support note. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatientNote"];
                "application/x-www-form-urlencoded": components["schemas"]["PatientNote"];
                "multipart/form-data": components["schemas"]["PatientNote"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientNote"];
                };
            };
        };
    };
    notes_support_notes_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this support note. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    notes_support_notes_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this support note. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPatientNote"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPatientNote"];
                "multipart/form-data": components["schemas"]["PatchedPatientNote"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientNote"];
                };
            };
        };
    };
    patients_patient_prescriptions_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                patient__full_name?: string;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientPrescription"][];
                };
            };
        };
    };
    patients_patient_prescriptions_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatientPrescription"];
                "application/x-www-form-urlencoded": components["schemas"]["PatientPrescription"];
                "multipart/form-data": components["schemas"]["PatientPrescription"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientPrescription"];
                };
            };
        };
    };
    patients_patient_prescriptions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientPrescription"];
                };
            };
        };
    };
    patients_patient_prescriptions_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatientPrescription"];
                "application/x-www-form-urlencoded": components["schemas"]["PatientPrescription"];
                "multipart/form-data": components["schemas"]["PatientPrescription"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientPrescription"];
                };
            };
        };
    };
    patients_patient_prescriptions_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patients_patient_prescriptions_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPatientPrescription"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPatientPrescription"];
                "multipart/form-data": components["schemas"]["PatchedPatientPrescription"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientPrescription"];
                };
            };
        };
    };
    patients_patient_profiles_list: {
        parameters: {
            query?: {
                dob?: string;
                first_name?: string;
                last_name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A search term. */
                search?: string;
                /** @description * `ACTIVE` - ACTIVE
                 *     * `ARCHIVED` - ARCHIVED
                 *     * `DRAFT` - DRAFT */
                state?: "ACTIVE" | "ARCHIVED" | "DRAFT";
                username?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientProfile"][];
                };
            };
        };
    };
    patients_patient_profiles_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatientProfile"];
                "application/x-www-form-urlencoded": components["schemas"]["PatientProfile"];
                "multipart/form-data": components["schemas"]["PatientProfile"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientProfile"];
                };
            };
        };
    };
    patients_patient_profiles_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this patient profile. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientProfile"];
                };
            };
        };
    };
    patients_patient_profiles_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this patient profile. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatientProfile"];
                "application/x-www-form-urlencoded": components["schemas"]["PatientProfile"];
                "multipart/form-data": components["schemas"]["PatientProfile"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientProfile"];
                };
            };
        };
    };
    patients_patient_profiles_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this patient profile. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patients_patient_profiles_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this patient profile. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPatientProfile"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPatientProfile"];
                "multipart/form-data": components["schemas"]["PatchedPatientProfile"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientProfile"];
                };
            };
        };
    };
}
